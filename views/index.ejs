<!DOCTYPE html>
<html lang="en">
<noscript>
    <style type="text/css">
        body {
            overflow: hidden;
        }

        .noscript-overlay {
            background-color: white;
            bottom: 0;
            left: 0;
            position: absolute;
            top: 0;
            right: 0;
            z-index: 2000;
        }

        .noscript-text {
            margin: 50px 50px;
        }

        .noscript-font {
            color: #333;
        }
    </style>
    <div class="noscript-overlay">
        <div class="noscript-text">
            <h1 class="noscript-font">
                    This website requires JavaScript to display graphical content.
                </h1>
            <p class="noscript-font"><strong>Please check your browser settings and turn on JavaScript.</strong></p>
            <p class="noscript-font">If you can't find the setting, try searching with your browser name (Chrome, Firefox, etc.) and "turning on JavaScript".</p>
            <p class="noscript-font">We do not track you over the web whatsoever.</p>
        </div>
    </div>
</noscript>

<head>
    <title>Weather </title>
    <!--css-->
    <link href='https://fonts.googleapis.com/css?family=Titillium+Web:400,300,600' rel='stylesheet' type='text/css'>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css">
    <link rel="stylesheet" type="text/css" href="css/index.css" />
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" crossorigin="anonymous">
    <!--js-->
    <script src="https://code.jquery.com/jquery-1.12.4.min.js" integrity="sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=" crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.min.js"></script>
    <script src="https://rawgithub.com/darkskyapp/skycons/master/skycons.js"></script>
    <script src="js/weather.js"></script>
</head>

<body>
    <!-- The overlay -->
    <div id="myNav" class="overlay">
        <!-- Button to close the overlay navigation --><a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>
        <!-- Overlay content -->
        <div class="overlay-content"> <a href="#">About</a> <a href="#">Services</a> <a href="#">Clients</a> <a href="#">Contact</a> </div>
    </div>
    <!-- Use any element to open/show the overlay navigation menu -->
    <nav class="navbar navbar-default">
        <div class="container-fluid">
            <!-- Brand and toggle get grouped for better mobile display -->
            <div class="navbar-header">
                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false"> <span class="sr-only">Toggle navigation</span> <span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span> </button> <a class="navbar-brand" href="#">A Weather Application</a> </div>
            <!-- Collect the nav links, forms, and other content for toggling -->
            <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
                <ul class="nav navbar-nav">
                    <li class="dropdown"> <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Locations <span class="caret"></span></a>
                        <ul class="dropdown-menu">
                            <li><a href="#"><i class="fa fa-map-marker" aria-hidden="true"></i> <span class="PrimaryLocation" >Current</span></a></li>
                            <li role="separator" class="divider"></li>
                            <li><a PrimaryLocation href="#">Another action</a></li>
                            <li><a href="#">Separated link</a></li>
                            <li role="separator" class="divider"></li>
                            <li><a href="#">One more separated link</a></li>
                        </ul>
                    </li>
                    <form class="navbar-form navbar-left" role="search">
                        <div class="input-group">
                            <input type="text" class="controls" id="pac-input" placeholder="Search  location"> <span class="input-group-btn">
                        <button type="submit" class="btn btn-default">
                            <span class="glyphicon glyphicon-search"></span> </button>
                            </span>
                        </div>
                    </form>
                </ul>
                <ul class="nav navbar-nav navbar-right">
                    <li><a href="#">Login/Signup</a></li>
                    <li class="dropdown"> <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Dropdown <span class="caret"></span></a>
                        <ul class="dropdown-menu">
                            <li><a href="#">Action</a></li>
                            <li><a href="#">Another action</a></li>
                            <li><a href="#">Something else here</a></li>
                            <li role="separator" class="divider"></li>
                            <li><a href="#">Separated link</a></li>
                        </ul>
                    </li>
                </ul>
            </div>
            <!-- /.navbar-collapse -->
        </div>
        <!-- /.container-fluid -->
    </nav>
    <div class="container">
        <div class="col-xs-6 col-sm-6 col-md-6"> <span class="location2">Loading location</span> <span class="sum">Loading summary</span> </div>
        <div class="col-xs-6 col-md-6 col-md-6"> <span class="inner">Loading weather information.</span> <span class="location">Loading location.</span> </div>
    </div>
    <div class="container">
        <!-- Nav tabs -->
        <ul class="nav nav-tabs" role="tablist">
            <li class="nav-item"> <a class="nav-link active" data-toggle="tab" href="#home" role="tab">Home</a> </li>
            <li class="nav-item"> <a class="nav-link" data-toggle="tab" href="#profile" role="tab">Profile</a> </li>
            <li class="nav-item"> <a class="nav-link" data-toggle="tab" href="#messages" role="tab">Messages</a> </li>
            <li class="nav-item"> <a class="nav-link" data-toggle="tab" href="#settings" role="tab">Settings</a> </li>
        </ul>
    </div>
    <!-- Tab panes -->
    <div class="tab-content">
        <div class="tab-pane active" id="home" role="tabpanel" style="padding-top:30px;padding-bottom:30px">
            <div class="container testimonial-group">
                <div class="row text-center" id="forecastDay" style="top:0px"></div>
            </div>     
        </div>
        <div class="tab-pane" id="profile" role="tabpanel">dfgd </div>
        <div class="tab-pane" id="messages" role="tabpanel">asdasdasd </div>
        <div class="tab-pane" id="settings" role="tabpanel"> asdasd </div>
        <div class="container">
            <hr>
        </div>
        <!--bar start-->
        <div class="container" id='compare'>
                  <!--bar start-->
                      <!-- <div class=\"container\"><div class=\"col-xs-6 col-sm-2 col-md-2\" style=\"padding-top: 9px;\"><div>WED</div><div>18</div></div><div class=\"col-xs-6 col-sm-2 col-md-2\"><img src=\"SVG/Cloud-Drizzle-Alt.svg\" width=\"80\" height=\"60\" color=\"white\"></div><div class=\"col-xs-3 col-sm-1 col-md-1\" style=\"padding-top: 18px;\"><span>18℃</span></div><div class=\"col-xs-6 col-sm-4 col-md-6\" style=\"padding-top: 18px; padding-left:0%;\"><p class=\"bar\" style=\"width:100%\"></p></div><div class=\"col-xs-3 col-sm-1 col-md-1\" style=\"padding-top: 18px;\"><span>38℃</span></div></div> -->
                      <!--bar end-->
                </div>
                <script src="reload.js"></script>
        <!--bar end-->
        <style>
            /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */

            #map {
                height: 100%;
            }
            /* Optional: Makes the sample page fill the window. */

            html,
            body {
                height: 100%;
                margin: 0;
                padding: 0;
            }

            #description {
                font-weight: 300;
            }

            #infowindow-content .title {
                font-weight: bold;
            }

            #infowindow-content {
                display: none;
            }

            #map #infowindow-content {
                display: inline;
            }

            .pac-card {
                margin: 10px 10px 0 0;
                border-radius: 2px 0 0 2px;
                box-sizing: border-box;
                -moz-box-sizing: border-box;
                box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
                background-color: #fff;
            }

            #pac-container {
                margin-right: 12px;
            }

            .pac-controls {
                display: inline-block;
                padding: 5px 11px;
            }

            .pac-controls label {}

            #pac-input {
                background-color: #fff;
                text-overflow: ellipsis;
                width: 350px;
            }

            #title {
                color: #fff;
                background-color: #4d90fe;
                font-weight: 500;
                padding: 6px 12px;
            }
        </style>
        </head>

        <body>
            <div id="map"></div>
            <div id="infowindow-content"> <img src="" width="16" height="16" id="place-icon"> <span id="place-name" class="title"></span>
                <br> <span id="place-address"></span> </div>
            <script>
                /* Open when someone clicks on the span element */
                function openNav() {
                    document.getElementById("myNav").style.width = "100%";
                }
                /* Close when someone clicks on the "x" symbol inside the overlay */
                function closeNav() {
                    document.getElementById("myNav").style.width = "0%";
                }
                // This example requires the Places library. Include the libraries=places
                // parameter when you first load the API. For example:
                // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
                function initMap() {
                    var map = new google.maps.Map(document.getElementById('map'), {
                        center: {
                            lat: -33.8688
                            , lng: 151.2195
                        }
                        , zoom: 13
                    });
                    var card = document.getElementById('pac-card');
                    var input = document.getElementById('pac-input');
                    var types = document.getElementById('type-selector');
                    var strictBounds = document.getElementById('strict-bounds-selector');
                    map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);
                    var autocomplete = new google.maps.places.Autocomplete(input);
                    // Bind the map's bounds (viewport) property to the autocomplete object,
                    // so that the autocomplete requests use the current map bounds for the
                    // bounds option in the request.
                    autocomplete.bindTo('bounds', map);
                    var infowindow = new google.maps.InfoWindow();
                    var infowindowContent = document.getElementById('infowindow-content');
                    infowindow.setContent(infowindowContent);
                    var marker = new google.maps.Marker({
                        map: map
                        , anchorPoint: new google.maps.Point(0, -29)
                    });
                    autocomplete.addListener('place_changed', function () {
                        infowindow.close();
                        marker.setVisible(false);
                        var place = autocomplete.getPlace();
                        if (!place.geometry) {
                            // User entered the name of a Place that was not suggested and
                            // pressed the Enter key, or the Place Details request failed.
                            window.alert("No details available for input: '" + place.name + "'");
                            return;
                        }
                        // If the place has a geometry, then present it on a map.
                        if (place.geometry.viewport) {
                            console.log(place.geometry.location.lat());
                            console.log(place.geometry.location.lng());
                            //            map.fitBounds(place.geometry.viewport);
                        }
                        else {
                            map.setCenter(place.geometry.location);
                            map.setZoom(17); // Why 17? Because it looks good.
                        }
                        marker.setPosition(place.geometry.location);
                        marker.setVisible(true);
                        var address = '';
                        if (place.address_components) {
                            address = [
                                (place.address_components[0] && place.address_components[0].short_name || '')
                                    , (place.address_components[1] && place.address_components[1].short_name || '')
                                    , (place.address_components[2] && place.address_components[2].short_name || '')
            ].join(' ');
                        }
                        infowindowContent.children['place-icon'].src = place.icon;
                        infowindowContent.children['place-name'].textContent = place.name;
                        infowindowContent.children['place-address'].textContent = address;
                        infowindow.open(map, marker);
                    });
                    // Sets a listener on a radio button to change the filter type on Places
                    // Autocomplete.
                    function setupClickListener(id, types) {
                        var radioButton = document.getElementById(id);
                        radioButton.addEventListener('click', function () {
                            autocomplete.setTypes(types);
                        });
                    }
                    setupClickListener('changetype-all', []);
                    setupClickListener('changetype-address', ['address']);
                    setupClickListener('changetype-establishment', ['establishment']);
                    setupClickListener('changetype-geocode', ['geocode']);
                    document.getElementById('use-strict-bounds').addEventListener('click', function () {
                        console.log('Checkbox clicked! New state=' + this.checked);
                        autocomplete.setOptions({
                            strictBounds: this.checked
                        });
                    });
                }
            </script>
            <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBaf4F_4S87KsLLSq9yhRwl01wkBVeaEh0&libraries=places&callback=initMap" async defer></script>
        </body>
        <script>
            //dynamically set skycons by class name
            var list = [
          "clear-day", "clear-night", "partly-cloudy-day"
          , "partly-cloudy-night", "cloudy", "rain", "sleet", "snow", "wind"
          , "fog"
        ]
                //dynamically set skycons by class name
                //functions that adding hour info
                //testing
            var weather = [{
                temperature: 0
                , icon: "rain"
    }, {
                temperature: 10
                , icon: "cloudy"
    }, {
                temperature: 20
                , icon: "snow"
    }, {
                temperature: 30
                , icon: "wind"
    }, {
                temperature: 25
                , icon: "clear-day"
    }]
            for (var a = 0; a < 24; a++) {
                var temp = Math.floor(Math.random() * (40 - (-40) + 1)) - 40
                var index = Math.floor(Math.random() * (9 - 0 + 1)) + 0
                weather.push({
                    temperature: temp
                    , icon: list[index]
                })
            }
            //testing
            /*
            unit can be "c" "C" "f" "F"
            */
            function renderingHourInfo(weather, unit) {
                var celsius = "&#8451;"
                var fahrenheit = "&#8457;"
                var tunit = celsius
                if (unit === "c" || unit === "C") {
                    tunit = celsius
                }
                if (unit === "f" || unit === "F") {
                    tunit = fahrenheit
                }
                //calculate average temp
                var sum = 0
                var min = weather[0].temperature
                var max = weather[0].temperature
                for (let x of weather) {
                    if (x.temperature < min) {
                        min = x.temperature
                    }
                    if (x.temperature > max) {
                        max = x.temperature
                    }
                    sum += x.temperature
                }
                var avg = sum / 24
                var height = 0.00
                for (var i = 0; i < weather.length; i++) {
                    console.log(i);
                    console.log(weather[i]);
                    height = (1 - (weather[i].temperature - min) / (max - min)) * 200
                    if (i < 12) {
                        $("#forecastDay").append("<div class=\"col-xs-4\"><div class=\"row\">" + (i + 1) + "AM</div><div class=\"row\" style=\"padding-top:" + height + "px\"><canvas class=\"" + weather[i].icon + "\" width=\"50\" height=\"50\"></canvas></div><div class=\"row\">" + weather[i].temperature + "" + tunit + "</div></div><!---->");
                    }
                    else {
                        $("#forecastDay").append("<div class=\"col-xs-4\"><div class=\"row\">" + (i + 1 - 12) + "PM</div><div class=\"row\" style=\"padding-top:" + height + "px\"><canvas class=\"" + weather[i].icon + "\" width=\"50\" height=\"50\"></canvas></div><div class=\"row\">" + weather[i].temperature + "" + tunit + "</div></div><!---->");
                    }
                }
                var icons = new Skycons({
                        "color": "#579fff"
                    })
                    , list = [
            "clear-day", "clear-night", "partly-cloudy-day"
            , "partly-cloudy-night", "cloudy", "rain", "sleet", "snow", "wind"
            , "fog"
          ]
                    , i;
                for (i = list.length; i--;) {
                    var weatherType = list[i]
                        , elements = document.getElementsByClassName(weatherType);
                    for (e = elements.length; e--;) {
                        icons.set(elements[e], weatherType);
                    }
                }
                icons.play();
            }
            renderingHourInfo(weather, "f")
                //functions that adding hour info
        </script>
        <!--
<script>

//testing
  var weather = [{
    time: 255589200,
    temperatureMax: 0,
    temperatureMin: -20,
    icon: "rain"
  }, {
    time: 255589200,
    temperatureMax: 30,
    temperatureMin: 15,
    icon: "cloudy"
  }, {
    time: 255589200,
    temperatureMax: 10,
    temperatureMin: -20,
    icon: "snow"
  }, {
    time: 255589200,
    temperatureMax: 20,
    temperatureMin: -40,
    icon: "wind"
  }, {
    time: 255589200,
    temperatureMax: 40,
    temperatureMin: -50,
    icon: "clear-day"
  }]

  /*
  unit can be "c" "C" "f" "F"
  */
  function renderingDayInfo(weather, unit) {
    var celsius = "&#8451;"
    var fahrenheit = "&#8457;"

    var tunit = celsius
    if (unit === "c" || unit === "C") {
      tunit = celsius
    }
    if (unit === "f" || unit === "F") {
      tunit = fahrenheit
    }


    //calculate average temp
    var min = weather[0].temperatureMin
    var max = weather[0].temperatureMax
    for (let x of weather) {
      if (x.temperatureMin < min) {
        min = x.temperatureMin
      }
      if (x.temperatureMax > max) {
        max = x.temperatureMax
      }
    }
    var dif = max - min
    var width0 = 0.00
    var width1 = 0.00
    var date
    var iconFileAddress
    for (var i = 0; i < weather.length; i++) {
    // var i = 1
      width0 = (weather[i].temperatureMin - min) / dif * 450
      width1 = (weather[i].temperatureMax - min) / dif * 450-width0
      date = processDate(weather[i].time)
      iconFileAddress = processIcon(weather[i].icon)
      $("#compare").append("<div class=\"container\"><div class=\"row\"><div class=\"col\"><div>" + date[0].toUpperCase() + "</div><div>" +
        date[2] + "</div></div><div class=\"col\"><img src=\"SVG/" + iconFileAddress + ".svg\" width=\"80\" height=\"60\" color=\"white\"></img></div><div class=\"barPadding row\" style=\"padding-left: " + width0 + "px;\"><span>" +
        weather[i].temperatureMin + tunit +"</span><p class=\"bar\" style=\"width: " + width1 + "px;\"></p><span>" + weather[i].temperatureMax + tunit + "</span></div></div></div>");
    }
  }

  function processDate(dateString) {
    var d = new Date(dateString)
    var n = d.toString()
    var res = n.split(" ")
    return res
  }

  function processIcon(icon) {
    switch (icon) {
      case "snow":
        return "Cloud-Snow"
        break;
      case "clear-day":
        return "Sun"
        break;
      case "clear-night":
        return "Moon"
        break;
      case "partly-cloudy-day":
        return "Cloud-Sun"
        break;
      case "partly-cloudy-night":
        return "Cloud-Moon"
        break;
      case "cloudy":
        return "Cloud"
        break;
      case "rain":
        return "Cloud-Rain"
        break;
      case "sleet":
        return "Cloud-Snow"
        break;
      case "wind":
        return "Wind"
        break;
      case "fog":
        return "Cloud-Fog"
        break;
      default:
        return "Sun"
    }
  }


//testing
  renderingDayInfo(weather,"c")
</script>
-->

</html>
